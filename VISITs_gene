#VISITs_gene
# 
## This script is used to count inactivating insertions in genes. It takes the output from preProcess (optional if replicated and multiple-hit reads were not removed before), and generate input for statisitcal test

NORMAL="\\033[0;39m"
RED="\\033[1;31m"
BLUE="\\033[0;34m"

## Check environment variable
hash bedtools 2>/dev/null || { echo >&2 "bedtools is required, but not installed.  Aborting."; exit 1; }
hash samtools 2>/dev/null || { echo >&2 "samtools is required, but not installed.  Aborting."; exit 1; }
hash Rscript 2>/dev/null || { echo >&2 "R is required, but not installed.  Aborting."; exit 1; }


function usage {
    echo -e "$BLUE""Usage : ./VISITs_gene [-m running mode] [-r minimum number of reads for each candidate] [-e specifiy 3/5 End insertion] [-f input filename] [-a Annotation directory] [-i Inclusion Kb upstream] [-s normalization methods] [-t number of Threads] [-o Output directory] [-n number of Genes] [-v display RUNTIME info] [-h display this Help]"
    echo -e "$RED""Options"
    echo -e "$BLUE""-y""$NORMAL" "[Default: pos] Screening type. Can be pos (positive screening) or neg (negative screening)" "$RED""(analyze mode)""$NORMAL"
    echo -e "$BLUE""-m""$NORMAL" "[Default: analyze] VISITs Running mode. analyze: identify candidates; diagnose: generate diagnose plots; report: generate output html"
    echo -e "$BLUE""-r""$NORMAL" "[Default: 1] minimum number of reads for each candidate. Candidates with fewer reads are discarded before entering test" "$RED""(diagnose/analyze mode)""$NORMAL"
    echo -e "$BLUE""-e""$NORMAL" "[Default: 5] Count 5' end or 3' end insertion sites" "$RED""(diagnose/analyze mode)""$NORMAL"
    echo -e "$BLUE""-f""$NORMAL" "a text file with input file path and experiment design" "$RED""(diagnose/analyze mode)""$NORMAL"
    echo -e "$BLUE""-i""$NORMAL" "[Default: 0] Reads inserted into iKb upstream (promotor) of the gene will also be included" "$RED""(diagnose/analyze mode)""$NORMAL"
    echo -e "$BLUE""-s""$NORMAL" "[Default: DESeq] Normalization methods, other options: TC(Total Count), TMM (edgeR), DESeq (RLE), upper (Upper Quartile) and ctrl (using ctrl genes)""$NORMAL" "$RED""(diagnose/analyze mode)""$NORMAL"
    echo -e "$BLUE""-t""$NORMAL" "[Default: 1] Number of Threads to be used" "$RED""(analyze/report mode)""$NORMAL"
    echo -e "$BLUE""-a""$NORMAL" "Annotation file folder containing the three annotation file: GeneIntervalModel.bed, IntronGeneModel.bed and syntheticGeneModel.bed" "$RED""(diagnose/analyze mode)""$NORMAL"
    echo -e "$BLUE""-o""$NORMAL" "Output folder for all mode; for report mode, also as input folder" "$BLUE""(all mode)""$NORMAL"
    echo -e "$BLUE""-n""$NORMAL" "[Default: 10] Number of Genes to be reported" "$RED""(report mode only)""$NORMAL"
    echo -e "$BLUE""-v""$NORMAL" "printing Detailed running information" "$BLUE""(all mode)""$NORMAL"
    echo -e "$BLUE""-h""$NORMAL" "<help>" "$BLUE""(all mode)""$NORMAL"
    exit;
}

## Display Help
if [ $# == 0 ]
then
	usage
	exit
fi

case $1 in
--h) usage ;;
--help) usage ;;
esac


###########parse input
set -- $(getopt :e:s:m:f:i:r:a:t:o:n:vh "$@")
while [ $# -gt 0 ]
do
    case "$1" in
        (-m) mode=$2; shift;;
	(-y) scr=$2; shift;;
	(-s) scaling=$2; shift;;
        (-e) end=$2; shift;;
        (-f) input=$2; shift;;
        (-i) inclusion=$2; shift;;
	(-r) reads=$2; shift;;
        (-a) anno_dir=$2; shift;;
        (-o) output=$2; shift;;
        (-v) verbose=ture;;
	(-t) threads=$2; shift;;
	(-n) number=$2; shift;;
        (-h) usage; exit;;
        (--) shift; break;;
        (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
        (*)  break;;
    esac
    shift
done
#echo $verbose
##Create Temp 
#[[ ! -d temp ]] && mkdir temp

## Check options
if [ -z "$end" ]; then   #check insertion site
    end=5
fi
if [ -z "$scr" ]; then   #check insertion site
	    scr=Pos
fi
if [ -z "$scaling" ]; then   #check insertion site
	    scaling=DESeq
    fi
if [ -z "$mode" ]; then   #check insertion site
	    mode=analyze
fi
if [ ! -r "$input" ] && [ $mode != report ]; then  #check input file option
    echo "input file does not exist"
    exit
fi
#if [ ! -r "$ctrl" ]; then  #check ctrl file option
#    echo "You can specify a bam file as ctrl library by -c, if available"
#    exit
#fi
if [ -z "$inclusion" ]; then   #check insertion site
    inclusion=0
    else
    inclusion=$(echo "$inclusion * 1000"|bc)
fi
if [ -z "$reads" ]; then   #check insertion site
    reads=1
fi

if [ -z "$threads" ]; then   #check number of threads
    threads=1
fi
if [ -z "$number" ]; then   #check number of threads
    number=10
fi
if [ ! -d "$output" ]; then  #check output folder option
    echo "output directory does not exist"
    exit
fi
if [ ! -d "$anno_dir" ] && [ $mode != report ]; then  #check annotation folder
    echo "annotation directory does not exist"
    exit
fi
if [ ! -r "$anno_dir/syntheticGeneModel.bed" ] && [ $mode != report ]; then  #check exon option
    echo "Exon annotation file (bed/gff) does not exist, please check if file syntheticGeneModel.bed exists"
    exit
fi
if [ ! -r "$anno_dir/IntronGeneModel.bed" ] && [ $mode != report ]; then  #check intron option
    echo "Intron annotation file (bed/gff) does not exist, please check if file IntronGeneModel.bed exists"
    exit
fi
if [ ! -r "$anno_dir/GeneIntervalModel.bed" ] && [ $mode != report ]; then  #check gene interval option
	echo "Gene interval annotation does not exist, please check if file GeneIntervalModel.bed exists"
	exit
fi

info=`echo MODE=$mode SCALING=$scaling END=$end INCLUSION=$inclusion INPUT=$input THREADS=$threads  OUTPUT=$output ANNO_DIR=$anno_dir NUMBER_of_GENE=$number|sed -e 's/\s/;/g'`

if [ ! -z $verbose ]; then
	echo -e "$BLUE""Applying VISITs Counting by Gene Approach..."        
	echo -e "MODE=$mode END=$end INCLUSION=$inclusion INPUT=$input THREADS=$threads  OUTPUT=$output ANNO_DIR=$anno_dir" NUMBER_of_GENE=$number"$NORMAL"
	echo $info
fi

if [ -z "$verbose" ]; then 
    verbose=false
fi


if [ $mode != report ]; then
for bam in `awk '{if ($2 == -1 && $1 !~ /#/) print}' $input|cut -f1`
do
if [ ! -r "$bam" ]; then  #check gene interval option
        echo $bam
	echo "bam file specified in input file does not exist, please check"
        exit
fi
done

###########Generate Exon & Gene Interval Model with the elongation upstream to iKb 
##Exon
if [ $(echo "$inclusion >= 0" | bc) -eq 1 ]; then
#if [[ $inclusion -gt 0 ]] then
        if [[ ! -r "$anno_dir/syntheticGeneModel_$inclusion.bed" ]]; then
                echo -e "$RED""Generating Gene Model with $inclusion bp upstream""$NORMAL"
                awk -v inclusion="$inclusion" 'BEGIN {i=0;j=0} {OFS="\t";if ($5==1 && $6=="+") {$2=$2-inclusion; print $0; i=0; j=0}; \
                if ($5==1 && $6=="-") {$3=$3+inclusion; print $0; i=0; j=0}  \
                if ($5> 1 && $6=="-") {j=j+1; if (j==$5) {$3=$3+inclusion; j=0; print $0} else print $0}; \
                if ($5> 1 && $6=="+") {i=i+1; if (i==1) {$2=$2-inclusion; print $0} else if (i==$5) {i=0; print $0} else print $0}}' $anno_dir/syntheticGeneModel.bed \
                | awk '{OFS="\t"; if ($2 <0) {$2=0; print $0} else print}' > $anno_dir/syntheticGeneModel_$inclusion.bed
        else
                echo -e "$RED""Elongated syntheticGeneModel Already Existed, Skip""$NORMAL"
        fi
##Gene Interval
	if [[ ! -r "$anno_dir/GeneIntervalModel_$inclusion.bed" ]]; then
		awk -v inclusion="$inclusion" '{OFS="\t";if ($6 == "+") {$2=$2-inclusion; print $0};  if ($6 == "-") {$3=$3+inclusion; print $0}}' $anno_dir/GeneIntervalModel.bed \
        	| awk '{OFS="\t"; if ($2 <0) {$2=0; print $0} else print}' > $anno_dir/GeneIntervalModel_$inclusion.bed
        else
                echo -e "$RED""Elongated GeneIntervalModel Already Existed, Skip""$NORMAL"
        fi
fi

#################Get only 5'/3' Insertion Site
[[ ! -d $output/bed ]] && mkdir $output/bed
for selected in `awk '{if ($2 == -1 && $1 !~ /#/) print}' $input|cut -f1`
do
if [ $end -eq 5 ]; then #keep only 5'-end for selected
	selected_bed=`basename $selected | sed 's/.bam/.bed/'`
	if [[ ! -r "$output/bed/$selected_bed" ]]; then
		echo -e "$RED""Getting Insertion Sites for $selected Library...""$NORMAL"
		bedtools bamtobed -i $selected |awk '{OFS="\t";if ($6=="+"&&$1!~/\_/) {$3=$2;print};if ($6=="-"&&$1!~/\_/){$2=$3;print}}' > $output/bed/$selected_bed
	else	
		echo -e "$RED""Independent Insertion Sites for $selected Library Already Existed, Skip""$NORMAL"
	fi
fi
if [ $end -eq 3 ]; then #keep only 3'-end for selected
	selected_bed=`basename $selected | sed 's/.bam/.bed/'`
	if [[ ! -r "$output/bed/selected_bed" ]]; then 
		echo -e "$RED""Getting Insertion Sites for $selected Library...""$NORMAL"
		bedtools bamtobed -i $selected |awk '{OFS="\t";if ($6=="+"&&$1!~/\_/) {$2=$3;print};if ($6=="-"&&$1!~/\_/){$3=$2;print}}' > $output/bed/$selected_bed
        else    
                echo -e "$RED""Independent Insertion Sites for $selected Library Already Existed, Skip""$NORMAL"
	fi
fi
done

###############Count Reads for Selected Library
#Exon
[[ ! -d $output/count ]] && mkdir $output/count
[[ ! -d $output/temp ]] && mkdir $output/temp
[[ -r "$output/temp/temp.bed" ]] && rm $output/temp/temp.bed
#for selected_bed in $output/bed/*.bed
for selected in `awk '{if ($2 == -1 && $1 !~ /#/) print}' $input|cut -f1`
do	
selected_bed=`basename $selected | sed 's/.bam/.bed/'`
selected_exonCount=`basename $output/bed/$selected_bed| sed 's/.bed/.ExonCount.bed/'`
if [[ ! -r "$output/count/$selected_exonCount" ]]; then
	echo -e "$RED""Counting Insertion Sites for $selected Library...""$NORMAL"
	bedtools intersect -a $output/bed/$selected_bed -b $anno_dir/syntheticGeneModel_$inclusion.bed > $output/temp/temp.bed
	bedtools coverage -a $output/temp/temp.bed -b $anno_dir/GeneIntervalModel_$inclusion.bed -counts > $output/count/$selected_exonCount
else
        echo -e "$RED""Counting for $selected_exonCount Already Existed, Skip""$NORMAL"
fi
[[ -r "$output/temp/temp.bed" ]] && rm $output/temp/temp.bed
#SenseIntron
selected_intronCount=`basename $output/bed/$selected_bed| sed 's/.bed/.IntronCount.bed/'`
if [[ ! -r "$output/count/$selected_intronCount" ]]; then
	bedtools intersect -a $output/bed/$selected_bed -b $anno_dir/IntronGeneModel.bed -s > $output/temp/temp.bed
	bedtools coverage -a $output/temp/temp.bed -b $anno_dir/GeneIntervalModel.bed -counts > $output/count/$selected_intronCount
fi
[[ -r "$output/temp/temp.bed" ]] && rm $output/temp/temp.bed
#AntiSenseIntron
selected_AntiIntronCount=`basename $output/bed/$selected_bed| sed 's/.bed/.AntiIntronCount.bed/'`
if [[ ! -r "$output/count/$selected_AntiIntronCount" ]]; then
        bedtools intersect -a $output/bed/$selected_bed -b $anno_dir/IntronGeneModel.bed -S > $output/temp/temp.bed
        bedtools coverage -a $output/temp/temp.bed -b $anno_dir/GeneIntervalModel.bed -counts > $output/count/$selected_AntiIntronCount
fi
[[ -r "$output/temp/temp.bed" ]] && rm $output/temp/temp.bed
done
##Delete Temp file


##############Generate Input file for R
awk '{OFS="\t";if ($2 == "Tag") print}' $input  > $output/exp_info_run.txt #add column name
for selected in `awk '{if ($2 == -1 && $1 !~ /#/) print}' $input|cut -f1`
#for bed in $output/count/*.bed
do
bed=`basename $selected .bam`
path=`pwd`
#name=`basename $bed|sed -e 's/.AntiIntronCount.bed//;s/.ExonCount.bed//;s/.IntronCount.bed//'`
#type=`grep $bed $input|cut -f4-`
type=`awk '{OFS="\t";if ($1 !~ /#/) print}' $input|grep $bed|cut -f4-`
echo -e $path/$output/count/$bed.AntiIntronCount.bed"\t"-1"\t"$bed"\t"$type >> $output/exp_info_run.txt
echo -e $path/$output/count/$bed.ExonCount.bed"\t"-1"\t"$bed"\t"$type >> $output/exp_info_run.txt
echo -e $path/$output/count/$bed.IntronCount.bed"\t"-1"\t"$bed"\t"$type >> $output/exp_info_run.txt
done
#tr ' ' \\t < $output/exp_info.txt > $output/exp_info.txt
##############Invoke RScript to do statistical test
[[ ! -d $output/diagnose ]] && mkdir $output/diagnose
echo -e "$RED""Import Data into R...""$NORMAL"
fi
cp lib/report.rmd $output/

Rscript lib/Gene_Count_Ctrl.R $output/exp_info_run.txt $reads $output $verbose $threads $number $info $inclusion $mode $scaling $scr
#Rscript Transcript_Count_Ctrl.R $output/exp_info.txt $reads $output $verbose $threads
